[gd_resource type="VisualShader" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
uniform_name = "T_BaseColor"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=9]

[sub_resource type="VisualShaderNodeVectorInterp" id=10]

[sub_resource type="VisualShaderNodeVectorInterp" id=11]

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "color"

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
uniform_name = "T_RedChannel"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=13]
uniform_name = "T_GreenChannel"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=14]
uniform_name = "T_BlueChannel"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=15]
output_port_for_preview = 0
uniform_name = "T_AlphaChannel"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeScalarOp" id=16]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=17]

[sub_resource type="VisualShaderNodeVectorDecompose" id=7]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D T_BaseColor : hint_black_albedo;
uniform sampler2D T_RedChannel : hint_black_albedo;
uniform sampler2D T_GreenChannel : hint_black_albedo;
uniform sampler2D T_BlueChannel : hint_black_albedo;
uniform sampler2D T_AlphaChannel : hint_black_albedo;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:15
	vec3 n_out15p0;
	float n_out15p1;
	{
		vec4 n_tex_read = texture(T_BaseColor, UV.xy);
		n_out15p0 = n_tex_read.rgb;
		n_out15p1 = n_tex_read.a;
	}

// TextureUniform:20
	vec3 n_out20p0;
	float n_out20p1;
	{
		vec4 n_tex_read = texture(T_RedChannel, UV.xy);
		n_out20p0 = n_tex_read.rgb;
		n_out20p1 = n_tex_read.a;
	}

// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// VectorDecompose:3
	float n_out3p0 = n_out2p0.x;
	float n_out3p1 = n_out2p0.y;
	float n_out3p2 = n_out2p0.z;

// VectorMix:16
	vec3 n_out16p0 = mix(n_out15p0, n_out20p0, vec3(n_out3p0));

// TextureUniform:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 n_tex_read = texture(T_GreenChannel, UV.xy);
		n_out21p0 = n_tex_read.rgb;
		n_out21p1 = n_tex_read.a;
	}

// VectorMix:17
	vec3 n_out17p0 = mix(n_out16p0, n_out21p0, vec3(n_out3p1));

// TextureUniform:22
	vec3 n_out22p0;
	float n_out22p1;
	{
		vec4 n_tex_read = texture(T_BlueChannel, UV.xy);
		n_out22p0 = n_tex_read.rgb;
		n_out22p1 = n_tex_read.a;
	}

// VectorMix:18
	vec3 n_out18p0 = mix(n_out17p0, n_out22p0, vec3(n_out3p2));

// TextureUniform:23
	vec3 n_out23p0;
	float n_out23p1;
	{
		vec4 n_tex_read = texture(T_AlphaChannel, UV.xy);
		n_out23p0 = n_tex_read.rgb;
		n_out23p1 = n_tex_read.a;
	}

// ScalarOp:24
	float n_out24p0 = n_out3p1 * n_out3p0;

// VectorMix:25
	vec3 n_out25p0 = mix(n_out18p0, n_out23p0, vec3(n_out24p0));

// Output:0
	ALBEDO = n_out25p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -950.232, -173.644 )
nodes/fragment/0/position = Vector2( 660, 160 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -840, 280 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -620, 280 )
nodes/fragment/15/node = SubResource( 8 )
nodes/fragment/15/position = Vector2( -180, 0 )
nodes/fragment/16/node = SubResource( 9 )
nodes/fragment/16/position = Vector2( 160, 80 )
nodes/fragment/17/node = SubResource( 10 )
nodes/fragment/17/position = Vector2( 160, 220 )
nodes/fragment/18/node = SubResource( 11 )
nodes/fragment/18/position = Vector2( 160, 380 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( -200, 200 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( -180, 420 )
nodes/fragment/22/node = SubResource( 14 )
nodes/fragment/22/position = Vector2( -180, 660 )
nodes/fragment/23/node = SubResource( 15 )
nodes/fragment/23/position = Vector2( -180, 900 )
nodes/fragment/24/node = SubResource( 16 )
nodes/fragment/24/position = Vector2( -380, 840 )
nodes/fragment/25/node = SubResource( 17 )
nodes/fragment/25/position = Vector2( 140, 780 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 16, 0, 17, 0, 17, 0, 18, 0, 15, 0, 16, 0, 20, 0, 16, 1, 21, 0, 17, 1, 22, 0, 18, 1, 3, 0, 16, 2, 3, 1, 17, 2, 3, 2, 18, 2, 3, 0, 24, 1, 3, 1, 24, 0, 18, 0, 25, 0, 23, 0, 25, 1, 24, 0, 25, 2, 25, 0, 0, 0 )
