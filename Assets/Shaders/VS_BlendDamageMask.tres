[gd_resource type="VisualShader" load_steps=16 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=10]
uniform_name = "DamageMapTexture1"
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
uniform_name = "DamageMapTexture2"
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
uniform_name = "DamageMapTexture3"
color_default = 1

[sub_resource type="VisualShaderNodeVectorOp" id=13]

[sub_resource type="VisualShaderNodeVectorOp" id=14]

[sub_resource type="VisualShaderNodeVectorOp" id=15]

[sub_resource type="VisualShaderNodeTextureUniform" id=16]
uniform_name = "DamageMapTexture4"
color_default = 1

[sub_resource type="VisualShaderNodeVectorOp" id=17]

[sub_resource type="VisualShaderNodeVectorFunc" id=18]
function = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=4]

[sub_resource type="VisualShaderNodeTextureUniform" id=5]
uniform_name = "DamageMapTexture0"
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=6]
uniform_name = "BaseColor"
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=7]
uniform_name = "DirtColor"
color_default = 1

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D DirtColor : hint_black;
uniform sampler2D BaseColor : hint_black;
uniform sampler2D DamageMapTexture0 : hint_black;
uniform sampler2D DamageMapTexture1 : hint_black;
uniform sampler2D DamageMapTexture2 : hint_black;
uniform sampler2D DamageMapTexture3 : hint_black;
uniform sampler2D DamageMapTexture4 : hint_black;



void vertex() {
// Output:0

}

void fragment() {
// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// VectorOp:9
	vec3 n_in9p1 = vec3(3.00000, 3.00000, 3.00000);
	vec3 n_out9p0 = n_out8p0 * n_in9p1;

// TextureUniform:7
	vec3 n_out7p0;
	float n_out7p1;
	{
		vec4 n_tex_read = texture(DirtColor, n_out9p0.xy);
		n_out7p0 = n_tex_read.rgb;
		n_out7p1 = n_tex_read.a;
	}

// TextureUniform:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_tex_read = texture(BaseColor, n_out9p0.xy);
		n_out6p0 = n_tex_read.rgb;
		n_out6p1 = n_tex_read.a;
	}

// TextureUniform:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 n_tex_read = texture(DamageMapTexture0, UV.xy);
		n_out5p0 = n_tex_read.rgb;
		n_out5p1 = n_tex_read.a;
	}

// TextureUniform:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 n_tex_read = texture(DamageMapTexture1, UV.xy);
		n_out11p0 = n_tex_read.rgb;
		n_out11p1 = n_tex_read.a;
	}

// VectorOp:14
	vec3 n_out14p0 = n_out5p0 + n_out11p0;

// TextureUniform:12
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 n_tex_read = texture(DamageMapTexture2, UV.xy);
		n_out12p0 = n_tex_read.rgb;
		n_out12p1 = n_tex_read.a;
	}

// VectorOp:15
	vec3 n_out15p0 = n_out14p0 + n_out12p0;

// TextureUniform:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 n_tex_read = texture(DamageMapTexture3, UV.xy);
		n_out13p0 = n_tex_read.rgb;
		n_out13p1 = n_tex_read.a;
	}

// VectorOp:16
	vec3 n_out16p0 = n_out15p0 + n_out13p0;

// TextureUniform:17
	vec3 n_out17p0;
	float n_out17p1;
	{
		vec4 n_tex_read = texture(DamageMapTexture4, UV.xy);
		n_out17p0 = n_tex_read.rgb;
		n_out17p1 = n_tex_read.a;
	}

// VectorOp:18
	vec3 n_out18p0 = n_out16p0 + n_out17p0;

// VectorFunc:19
	vec3 n_out19p0 = max(min(n_out18p0, vec3(1.0)), vec3(0.0));

// VectorMix:4
	vec3 n_out4p0 = mix(n_out7p0, n_out6p0, n_out19p0);

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -889.15, -72.4718 )
nodes/fragment/0/position = Vector2( 600, 140 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -220, 40 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( -980, 180 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -580, -360 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -580, -120 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -1020, -280 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -954, -75 )
nodes/fragment/11/node = SubResource( 10 )
nodes/fragment/11/position = Vector2( -980, 400 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( -680, 460 )
nodes/fragment/13/node = SubResource( 12 )
nodes/fragment/13/position = Vector2( -640, 740 )
nodes/fragment/14/node = SubResource( 13 )
nodes/fragment/14/position = Vector2( -660, 320 )
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( -440, 320 )
nodes/fragment/16/node = SubResource( 15 )
nodes/fragment/16/position = Vector2( -220, 320 )
nodes/fragment/17/node = SubResource( 16 )
nodes/fragment/17/position = Vector2( -340, 740 )
nodes/fragment/18/node = SubResource( 17 )
nodes/fragment/18/position = Vector2( -20, 320 )
nodes/fragment/19/node = SubResource( 18 )
nodes/fragment/19/position = Vector2( 200, 340 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 6, 0, 4, 1, 7, 0, 4, 0, 8, 0, 9, 0, 9, 0, 7, 0, 9, 0, 6, 0, 5, 0, 14, 0, 11, 0, 14, 1, 14, 0, 15, 0, 12, 0, 15, 1, 13, 0, 16, 1, 15, 0, 16, 0, 16, 0, 18, 0, 17, 0, 18, 1, 18, 0, 19, 0, 19, 0, 4, 2 )
